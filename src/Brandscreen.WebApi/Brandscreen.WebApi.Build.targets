<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="EnsureNode">
    <PropertyGroup>
      <UnknownNodePath>Global NodeJS installation not found. Please set the 'NODEJS' environment variable for a global installation or set the 'LocalNodePath' property in your project file for a local installation.</UnknownNodePath>
      <InvalidGlobalNodePath>Invalid global node path.</InvalidGlobalNodePath>
      <InvalidLocalNodePath>Invalid local node path.</InvalidLocalNodePath>
      <EnsureNodeInPathCmd></EnsureNodeInPathCmd>
    </PropertyGroup>
    <Message Text="Ensuring NodeJS is installed" Importance="low" />

    <Error Condition=" '$(LocalNodePath)' != '' AND !Exists('$(LocalNodePath)')" Text="$(InvalidLocalNodePath) $(LocalNodePath)" />
    <PropertyGroup Condition=" '$(LocalNodePath)' != '' ">
      <NodePath>$(LocalNodePath)</NodePath>
      <EnsureNodeInPathCmd>SETLOCAL &amp; SET PATH=$(NodePath);%PATH% &amp;</EnsureNodeInPathCmd>
    </PropertyGroup>

    <Exec Command="$(WINDIR)\system32\where.exe node"
        ContinueOnError="true"
        IgnoreExitCode="true"
        ConsoleToMsBuild="true"
        Condition=" '$(NodePath)' == '' ">
      <Output TaskParameter="ExitCode" PropertyName="WhereExitCode"/>
      <Output TaskParameter="ConsoleOutput" PropertyName="NodeExecutable" />
    </Exec>
    <PropertyGroup Condition=" '$(WhereExitCode)' == '0' ">
      <NodePath>$([System.IO.Path]::GetDirectoryName('$(NodeExecutable)'))</NodePath>
    </PropertyGroup>
    <Error Condition=" '$(NodePath)' == '' " Text="$(UnknownNodePath)" />
    <Error Condition=" !Exists('$(NodePath)') " Text="$(InvalidGlobalNodePath) $(NodePath)" />

    <Message Text="NodeJS path is: '$(NodePath)'" />
  </Target>

  <Target Name="EnsureNodeModules" DependsOnTargets="EnsureNode">
    <PropertyGroup>
      <UnknownNodeModulePath>Global node modules not found. Please set the 'LocalNodeModulePath' property in your project file.</UnknownNodeModulePath>
      <InvalidGlobalNodeModulePath>Invalid global node module path.</InvalidGlobalNodeModulePath>
      <InvalidLocalNodeModulePath>Invalid local node module path.</InvalidLocalNodeModulePath>
      <NpmGetPrefix>""$(NodePath)\npm.cmd" config get prefix"</NpmGetPrefix>
    </PropertyGroup>
    <Message Text="Ensuring global npm path" Importance="low" />

    <Error Condition=" '$(LocalNodeModulePath)' != '' AND !Exists('$(LocalNodeModulePath)')" Text="'$(InvalidLocalNodeModulePath)'" />
    <PropertyGroup Condition=" '$(LocalNodeModulePath)' != '' ">
      <NodeModulePath>$(LocalNodeModulePath)</NodeModulePath>
    </PropertyGroup>

    <Exec Command="$(WINDIR)\system32\cmd.exe /C $(NpmGetPrefix)"
        ContinueOnError="true"
        IgnoreExitCode="true"
        ConsoleToMsBuild="true"
        Condition=" !Exists('$(NodeModulePath)') ">
      <Output TaskParameter="ExitCode" PropertyName="NpmExitCode"/>
      <Output TaskParameter="ConsoleOutput" PropertyName="NodeModulePath" />
    </Exec>
    <Error Condition=" '$(NodeModulePath)' == '' " Text="$(UnknownNodeModulePath)" />
    <Error Condition=" !Exists('$(NodeModulePath)') " Text="$(InvalidGlobalNodeModulePath) $(NodeModulePath)" />

    <Message Text="Node module path is: '$(NodeModulePath)'" />
  </Target>

  <Target Name="RunNpm"
    DependsOnTargets="EnsureNode"
    Condition=" Exists('$(NpmFile)') ">
    <PropertyGroup>
      <NpmWorkingDirectory>$([System.IO.Path]::GetDirectoryName('$(NpmFile)'))</NpmWorkingDirectory>
      <RunNpmCmd>"$(NodePath)\npm" $(NpmCommand)</RunNpmCmd>
    </PropertyGroup>

    <Message Text="Npm Working Directory: '$(NpmWorkingDirectory)'" />

    <Exec Command="$(RunNpmCmd)"
        WorkingDirectory="$(NpmWorkingDirectory)"
        CustomErrorRegularExpression="(ERR!.*is not in the npm registry|Usage:)"/>
  </Target>

  <Target Name="EnsureGulp">
    <PropertyGroup>
      <GulpNotFoundError>Gulp module not found. Please install Gulp in the node module path '$(NodeModulePath)'.</GulpNotFoundError>
      <GulpExecutable>$(NodeModulePath)\gulp.cmd</GulpExecutable>
      <GulpOut>$([System.IO.Path]::GetTempFileName())</GulpOut>
      <GulpExitCode>0</GulpExitCode>
      <GulpTaskDeprecationWarning>The 'GulpTask' property is deprecated and will be removed in a future version. Please use 'GulpBuildTask' instead.</GulpTaskDeprecationWarning>
    </PropertyGroup>
    <Message Text="Ensuring Gulp is installed" Importance="low" />

    <Exec Command="$(WINDIR)\system32\where.exe gulp"
        ContinueOnError="true"
        IgnoreExitCode="true"
        Condition=" !Exists('$(GulpExecutable)') ">
      <Output TaskParameter="ExitCode" PropertyName="GulpExitCode"/>
      <Output TaskParameter="ConsoleOutput" PropertyName="GulpExecutable" />
    </Exec>
    <Error Condition=" '$(GulpExitCode)' != '0' " Text="'$(GulpNotFoundError)'" />

    <!-- Deprecated Warning & Fallback -->
    <Warning Condition=" '$(GulpTask)' != '' " Text="'$(GulpTaskDeprecationWarning)'" />
    <PropertyGroup Condition=" '$(GulpTask)' != '' ">
      <GulpBuildTask>$(GulpTask)</GulpBuildTask>
    </PropertyGroup>

    <PropertyGroup>
      <RunGulpBuildCmd>$(EnsureNodeInPathCmd) "$(GulpExecutable)" $(GulpBuildTask) --cwd "$(GulpWorkingDirectory)" --gulpfile "$(GulpFile)" > "$(GulpOut)"</RunGulpBuildCmd>
      <RunGulpCleanCmd>$(EnsureNodeInPathCmd) "$(GulpExecutable)" $(GulpCleanTask) --cwd "$(GulpWorkingDirectory)" --gulpfile "$(GulpFile)" > "$(GulpOut)"</RunGulpCleanCmd>

      <GulpBuildTaskError>Error running gulp task '$(GulpBuildTask)'. See Warnings for details.</GulpBuildTaskError>
      <GulpCleanTaskError>Error running gulp task '$(GulpCleanTask)'. See Warnings for details.</GulpCleanTaskError>
    </PropertyGroup>

    <Message Text="Gulp found: '$(GulpExecutable)'" />
  </Target>

  <Target Name="RunGulpBuild"
      DependsOnTargets="EnsureNodeModules;EnsureGulp"
      Condition=" Exists('$(GulpFile)') AND '$(GulpBuildTask)' != '' " >
    <Message Text="Running Gulp: '$(GulpBuildTask)'" />
    <Exec Command="$(RunGulpBuildCmd)"
        ContinueOnError="true"
        IgnoreExitCode="true"
        ConsoleToMsBuild="true"
        WorkingDirectory="$(GulpWorkingDirectory)" >
      <Output TaskParameter="ExitCode" PropertyName="GulpExitCode"/>
    </Exec>
    <ReadLinesFromFile File="$(GulpOut)">
      <Output TaskParameter="Lines" ItemName="GulpOutLines"/>
    </ReadLinesFromFile>
    <Delete Files="$(GulpOut)"/>
    <Warning Condition=" '$(GulpExitCode)' != '0' " Text="%(GulpOutLines.Identity)" />
    <Error Condition=" '$(GulpExitCode)' != '0' " Text="$(GulpBuildTaskError)" />
  </Target>

  <Target Name="RunGulpClean"
      DependsOnTargets="EnsureNodeModules;EnsureGulp"
      Condition=" Exists('$(GulpFile)') AND '$(GulpCleanTask)' != '' " >
    <Message Text="Running Gulp: '$(GulpCleanTask)'" />
    <Exec Command="$(RunGulpCleanCmd)"
        ContinueOnError="true"
        IgnoreExitCode="true"
        ConsoleToMsBuild="true"
        WorkingDirectory="$(GulpWorkingDirectory)" >
      <Output TaskParameter="ExitCode" PropertyName="GulpExitCode"/>
    </Exec>
    <ReadLinesFromFile File="$(GulpOut)">
      <Output TaskParameter="Lines" ItemName="GulpOutLines"/>
    </ReadLinesFromFile>
    <Delete Files="$(GulpOut)"/>
    <Warning Condition=" '$(GulpExitCode)' != '0' " Text="%(GulpOutLines.Identity)" />
    <Error Condition=" '$(GulpExitCode)' != '0' " Text="$(GulpCleanTaskError)" />
  </Target>

  <Target Name="AfterBuild">
    <ItemGroup>
      <ConfigFiles Include="bin\AppSettings.config" />
      <ConfigFiles Include="bin\ConnectionStrings.config" />
      <ConfigFiles Include="bin\NLog.config" />
    </ItemGroup>
    <!-- copy above transformed config files by SlowCheetah from bin folder to root folder-->
    <Copy SourceFiles="@(ConfigFiles)" DestinationFolder="$(MSBuildProjectDirectory)" SkipUnchangedFiles="true" />
    <!-- transform web.config basing on base template since Web.config is not part of source control -->
    <TransformXml Source="Web.BASE.config" Transform="Web.$(Configuration).config" Destination="Web.config" />
    <!-- npm and gulp -->
    <CallTarget Targets="RunNpm" Condition="'$(Configuration)' != 'Debug'" />
    <CallTarget Targets="RunGulpBuild" />
  </Target>

  <Target Name="AfterClean">
    <CallTarget Targets="RunNpm" Condition="'$(Configuration)' != 'Debug'" />
    <CallTarget Targets="RunGulpClean" />
  </Target>
</Project>
